// Code generated by trpc-go/trpc-cmdline v1.0.7. DO NOT EDIT.
// source: helloworld.proto

package stream

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
	"trpc.group/trpc-go/trpc-go/stream"
)

// START ======================================= Server Service Definition ======================================= START

// TestStreamService defines service.
type TestStreamService interface {
	UploadFileStream(TestStream_UploadFileStreamServer) error
}

func TestStreamService_UploadFileStream_Handler(srv interface{}, stream server.Stream) error {
	return srv.(TestStreamService).UploadFileStream(&testStreamUploadFileStreamServer{stream})
}

type TestStream_UploadFileStreamServer interface {
	SendAndClose(*UploadFileResp) error
	Recv() (*UploadFileReq, error)
	server.Stream
}

type testStreamUploadFileStreamServer struct {
	server.Stream
}

func (x *testStreamUploadFileStreamServer) SendAndClose(m *UploadFileResp) error {
	return x.Stream.SendMsg(m)
}

func (x *testStreamUploadFileStreamServer) Recv() (*UploadFileReq, error) {
	m := new(UploadFileReq)
	if err := x.Stream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestStreamServer_ServiceDesc descriptor for server.RegisterService.
var TestStreamServer_ServiceDesc = server.ServiceDesc{
	ServiceName:  "trpc.examples.stream.TestStream",
	HandlerType:  ((*TestStreamService)(nil)),
	StreamHandle: stream.NewStreamDispatcher(),
	Methods:      []server.Method{},
	Streams: []server.StreamDesc{
		{
			StreamName:    "/trpc.examples.stream.TestStream/UploadFileStream",
			Handler:       TestStreamService_UploadFileStream_Handler,
			ServerStreams: false,
		},
	},
}

// RegisterTestStreamService registers service.
func RegisterTestStreamService(s server.Service, svr TestStreamService) {
	if err := s.Register(&TestStreamServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TestStream register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTestStream struct{}

func (s *UnimplementedTestStream) UploadFileStream(stream TestStream_UploadFileStreamServer) error {
	return errors.New("rpc UploadFileStream of service TestStream is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TestStreamClientProxy defines service client proxy
type TestStreamClientProxy interface {
	UploadFileStream(ctx context.Context, opts ...client.Option) (TestStream_UploadFileStreamClient, error)
}

type TestStreamClientProxyImpl struct {
	client       client.Client
	streamClient stream.Client
	opts         []client.Option
}

var NewTestStreamClientProxy = func(opts ...client.Option) TestStreamClientProxy {
	return &TestStreamClientProxyImpl{client: client.DefaultClient, streamClient: stream.DefaultStreamClient, opts: opts}
}

func (c *TestStreamClientProxyImpl) UploadFileStream(ctx context.Context, opts ...client.Option) (TestStream_UploadFileStreamClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.examples.stream.TestStream/UploadFileStream")
	msg.WithCalleeServiceName(TestStreamServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("examples")
	msg.WithCalleeServer("stream")
	msg.WithCalleeService("TestStream")
	msg.WithCalleeMethod("UploadFileStream")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.examples.stream.TestStream/UploadFileStream"
	clientStreamDesc.ClientStreams = true
	clientStreamDesc.ServerStreams = false

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.examples.stream.TestStream/UploadFileStream", callopts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamUploadFileStreamClient{stream}
	return x, nil
}

type TestStream_UploadFileStreamClient interface {
	Send(*UploadFileReq) error
	CloseAndRecv() (*UploadFileResp, error)
	client.ClientStream
}

type testStreamUploadFileStreamClient struct {
	client.ClientStream
}

func (x *testStreamUploadFileStreamClient) Send(m *UploadFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamUploadFileStreamClient) CloseAndRecv() (*UploadFileResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// END ======================================= Client Service Definition ======================================= END
