// Code generated by trpc-go/trpc-cmdline v2.1.6. DO NOT EDIT.
// source: helloworld.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/restful"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// GreeterService defines service.
type GreeterService interface {
	SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error)

	Message(ctx context.Context, req *MessageRequest) (*MessageInfo, error)

	UpdateMessage(ctx context.Context, req *UpdateMessageRequest) (*MessageInfo, error)

	UpdateMessageV2(ctx context.Context, req *UpdateMessageV2Request) (*MessageInfo, error)
}

func GreeterService_SayHello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &HelloRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GreeterService).SayHello(ctx, reqbody.(*HelloRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GreeterService_Message_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &MessageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GreeterService).Message(ctx, reqbody.(*MessageRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GreeterService_UpdateMessage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateMessageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GreeterService).UpdateMessage(ctx, reqbody.(*UpdateMessageRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GreeterService_UpdateMessageV2_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateMessageV2Request{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GreeterService).UpdateMessageV2(ctx, reqbody.(*UpdateMessageV2Request))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// requestBodyGreeterServiceUpdateMessageRESTfulPath0 PATCH: /v1/greeter/message/{message_id}
type requestBodyGreeterServiceUpdateMessageRESTfulPath0 struct{}

func (requestBodyGreeterServiceUpdateMessageRESTfulPath0) Locate(message restful.ProtoMessage) interface{} {
	x := message.(*UpdateMessageRequest)
	return &x.Message
}

func (requestBodyGreeterServiceUpdateMessageRESTfulPath0) Body() string {
	return "message"
}

// requestBodyGreeterServiceUpdateMessageV2RESTfulPath0 PATCH: /v2/greeter/message/{message_id}
type requestBodyGreeterServiceUpdateMessageV2RESTfulPath0 struct{}

func (requestBodyGreeterServiceUpdateMessageV2RESTfulPath0) Locate(message restful.ProtoMessage) interface{} {
	x := message.(*UpdateMessageV2Request)
	return x
}

func (requestBodyGreeterServiceUpdateMessageV2RESTfulPath0) Body() string {
	return "*"
}

// GreeterServer_ServiceDesc descriptor for server.RegisterService.
var GreeterServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.examples.restful.helloworld.Greeter",
	HandlerType: ((*GreeterService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.examples.restful.helloworld.Greeter/SayHello",
			Func: GreeterService_SayHello_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/trpc.examples.restful.helloworld.Greeter/SayHello",
				Input: func() restful.ProtoMessage { return new(HelloRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqbody interface{}) (interface{}, error) {
					return svc.(GreeterService).SayHello(ctx, reqbody.(*HelloRequest))
				},
				HTTPMethod:   "GET",
				Pattern:      restful.Enforce("/v1/greeter/hello/{name}"),
				Body:         nil,
				ResponseBody: nil,
			}},
		},
		{
			Name: "/trpc.examples.restful.helloworld.Greeter/Message",
			Func: GreeterService_Message_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/trpc.examples.restful.helloworld.Greeter/Message",
				Input: func() restful.ProtoMessage { return new(MessageRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqbody interface{}) (interface{}, error) {
					return svc.(GreeterService).Message(ctx, reqbody.(*MessageRequest))
				},
				HTTPMethod:   "GET",
				Pattern:      restful.Enforce("/v1/greeter/message/{name=messages/*}"),
				Body:         nil,
				ResponseBody: nil,
			}},
		},
		{
			Name: "/trpc.examples.restful.helloworld.Greeter/UpdateMessage",
			Func: GreeterService_UpdateMessage_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/trpc.examples.restful.helloworld.Greeter/UpdateMessage",
				Input: func() restful.ProtoMessage { return new(UpdateMessageRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqbody interface{}) (interface{}, error) {
					return svc.(GreeterService).UpdateMessage(ctx, reqbody.(*UpdateMessageRequest))
				},
				HTTPMethod:   "PATCH",
				Pattern:      restful.Enforce("/v1/greeter/message/{message_id}"),
				Body:         requestBodyGreeterServiceUpdateMessageRESTfulPath0{},
				ResponseBody: nil,
			}},
		},
		{
			Name: "/trpc.examples.restful.helloworld.Greeter/UpdateMessageV2",
			Func: GreeterService_UpdateMessageV2_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/trpc.examples.restful.helloworld.Greeter/UpdateMessageV2",
				Input: func() restful.ProtoMessage { return new(UpdateMessageV2Request) },
				Filter: func(svc interface{}, ctx context.Context, reqbody interface{}) (interface{}, error) {
					return svc.(GreeterService).UpdateMessageV2(ctx, reqbody.(*UpdateMessageV2Request))
				},
				HTTPMethod:   "PATCH",
				Pattern:      restful.Enforce("/v2/greeter/message/{message_id}"),
				Body:         requestBodyGreeterServiceUpdateMessageV2RESTfulPath0{},
				ResponseBody: nil,
			}},
		},
	},
}

// RegisterGreeterService registers service.
func RegisterGreeterService(s server.Service, svr GreeterService) {
	if err := s.Register(&GreeterServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Greeter register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedGreeter struct{}

func (s *UnimplementedGreeter) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, errors.New("rpc SayHello of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) Message(ctx context.Context, req *MessageRequest) (*MessageInfo, error) {
	return nil, errors.New("rpc Message of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) UpdateMessage(ctx context.Context, req *UpdateMessageRequest) (*MessageInfo, error) {
	return nil, errors.New("rpc UpdateMessage of service Greeter is not implemented")
}
func (s *UnimplementedGreeter) UpdateMessageV2(ctx context.Context, req *UpdateMessageV2Request) (*MessageInfo, error) {
	return nil, errors.New("rpc UpdateMessageV2 of service Greeter is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// GreeterClientProxy defines service client proxy
type GreeterClientProxy interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (rsp *HelloReply, err error)

	Message(ctx context.Context, req *MessageRequest, opts ...client.Option) (rsp *MessageInfo, err error)

	UpdateMessage(ctx context.Context, req *UpdateMessageRequest, opts ...client.Option) (rsp *MessageInfo, err error)

	UpdateMessageV2(ctx context.Context, req *UpdateMessageV2Request, opts ...client.Option) (rsp *MessageInfo, err error)
}

type GreeterClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGreeterClientProxy = func(opts ...client.Option) GreeterClientProxy {
	return &GreeterClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GreeterClientProxyImpl) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.examples.restful.helloworld.Greeter/SayHello")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("SayHello")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HelloReply{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GreeterClientProxyImpl) Message(ctx context.Context, req *MessageRequest, opts ...client.Option) (*MessageInfo, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.examples.restful.helloworld.Greeter/Message")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("Message")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &MessageInfo{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GreeterClientProxyImpl) UpdateMessage(ctx context.Context, req *UpdateMessageRequest, opts ...client.Option) (*MessageInfo, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.examples.restful.helloworld.Greeter/UpdateMessage")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("UpdateMessage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &MessageInfo{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GreeterClientProxyImpl) UpdateMessageV2(ctx context.Context, req *UpdateMessageV2Request, opts ...client.Option) (*MessageInfo, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.examples.restful.helloworld.Greeter/UpdateMessageV2")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("UpdateMessageV2")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &MessageInfo{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
