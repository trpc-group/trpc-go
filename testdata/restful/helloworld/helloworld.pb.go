//
//
// Tencent is pleased to support the open source community by making tRPC available.
//
// Copyright (C) 2023 THL A29 Limited, a Tencent company.
// All rights reserved.
//
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the  Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: helloworld.proto

package helloworld

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数字枚举
type NumericEnum int32

const (
	NumericEnum_ZERO NumericEnum = 0
	NumericEnum_ONE  NumericEnum = 1
)

// Enum value maps for NumericEnum.
var (
	NumericEnum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
	}
	NumericEnum_value = map[string]int32{
		"ZERO": 0,
		"ONE":  1,
	}
)

func (x NumericEnum) Enum() *NumericEnum {
	p := new(NumericEnum)
	*p = x
	return p
}

func (x NumericEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumericEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_proto_enumTypes[0].Descriptor()
}

func (NumericEnum) Type() protoreflect.EnumType {
	return &file_helloworld_proto_enumTypes[0]
}

func (x NumericEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumericEnum.Descriptor instead.
func (NumericEnum) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{0}
}

type NestedOuter_DeepEnum int32

const (
	NestedOuter_FALSE NestedOuter_DeepEnum = 0
	NestedOuter_TRUE  NestedOuter_DeepEnum = 1
)

// Enum value maps for NestedOuter_DeepEnum.
var (
	NestedOuter_DeepEnum_name = map[int32]string{
		0: "FALSE",
		1: "TRUE",
	}
	NestedOuter_DeepEnum_value = map[string]int32{
		"FALSE": 0,
		"TRUE":  1,
	}
)

func (x NestedOuter_DeepEnum) Enum() *NestedOuter_DeepEnum {
	p := new(NestedOuter_DeepEnum)
	*p = x
	return p
}

func (x NestedOuter_DeepEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NestedOuter_DeepEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_proto_enumTypes[1].Descriptor()
}

func (NestedOuter_DeepEnum) Type() protoreflect.EnumType {
	return &file_helloworld_proto_enumTypes[1]
}

func (x NestedOuter_DeepEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NestedOuter_DeepEnum.Descriptor instead.
func (NestedOuter_DeepEnum) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{2, 0}
}

// Hello 请求
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SingleNested           *NestedOuter `protobuf:"bytes,2,opt,name=single_nested,json=singleNested,proto3" json:"single_nested,omitempty"`
	PrimitiveBytesValue    []byte       `protobuf:"bytes,3,opt,name=primitive_bytes_value,json=primitiveBytesValue,proto3" json:"primitive_bytes_value,omitempty"`
	PrimitiveBoolValue     bool         `protobuf:"varint,4,opt,name=primitive_bool_value,json=primitiveBoolValue,proto3" json:"primitive_bool_value,omitempty"`
	PrimitiveFloatValue    float32      `protobuf:"fixed32,5,opt,name=primitive_float_value,json=primitiveFloatValue,proto3" json:"primitive_float_value,omitempty"`
	PrimitiveDoubleValue   float64      `protobuf:"fixed64,6,opt,name=primitive_double_value,json=primitiveDoubleValue,proto3" json:"primitive_double_value,omitempty"`
	PrimitiveInt32Value    int32        `protobuf:"varint,7,opt,name=primitive_int32_value,json=primitiveInt32Value,proto3" json:"primitive_int32_value,omitempty"`
	PrimitiveUint32Value   uint32       `protobuf:"varint,8,opt,name=primitive_uint32_value,json=primitiveUint32Value,proto3" json:"primitive_uint32_value,omitempty"`
	PrimitiveInt64Value    int64        `protobuf:"varint,9,opt,name=primitive_int64_value,json=primitiveInt64Value,proto3" json:"primitive_int64_value,omitempty"`
	PrimitiveUint64Value   uint64       `protobuf:"varint,10,opt,name=primitive_uint64_value,json=primitiveUint64Value,proto3" json:"primitive_uint64_value,omitempty"`
	PrimitiveFixed32Value  uint32       `protobuf:"fixed32,11,opt,name=primitive_fixed32_value,json=primitiveFixed32Value,proto3" json:"primitive_fixed32_value,omitempty"`
	PrimitiveFixed64Value  uint64       `protobuf:"fixed64,12,opt,name=primitive_fixed64_value,json=primitiveFixed64Value,proto3" json:"primitive_fixed64_value,omitempty"`
	PrimitiveSint32Value   int32        `protobuf:"zigzag32,13,opt,name=primitive_sint32_value,json=primitiveSint32Value,proto3" json:"primitive_sint32_value,omitempty"`
	PrimitiveSint64Value   int64        `protobuf:"zigzag64,14,opt,name=primitive_sint64_value,json=primitiveSint64Value,proto3" json:"primitive_sint64_value,omitempty"`
	PrimitiveSfixed32Value int32        `protobuf:"fixed32,15,opt,name=primitive_sfixed32_value,json=primitiveSfixed32Value,proto3" json:"primitive_sfixed32_value,omitempty"`
	PrimitiveSfixed64Value int64        `protobuf:"fixed64,16,opt,name=primitive_sfixed64_value,json=primitiveSfixed64Value,proto3" json:"primitive_sfixed64_value,omitempty"`
	EnumValue              NumericEnum  `protobuf:"varint,17,opt,name=enum_value,json=enumValue,proto3,enum=trpc.examples.restful.helloworld.NumericEnum" json:"enum_value,omitempty"`
	// Types that are assignable to OneofValue:
	//
	//	*HelloRequest_OneofEmpty
	//	*HelloRequest_OneofString
	OneofValue          isHelloRequest_OneofValue `protobuf_oneof:"oneof_value"`
	RepeatedStringValue []string                  `protobuf:"bytes,20,rep,name=repeated_string_value,json=repeatedStringValue,proto3" json:"repeated_string_value,omitempty"`
	RepeatedEnumValue   []NumericEnum             `protobuf:"varint,21,rep,packed,name=repeated_enum_value,json=repeatedEnumValue,proto3,enum=trpc.examples.restful.helloworld.NumericEnum" json:"repeated_enum_value,omitempty"`
	RepeatedNestedValue []*NestedOuter            `protobuf:"bytes,22,rep,name=repeated_nested_value,json=repeatedNestedValue,proto3" json:"repeated_nested_value,omitempty"`
	MappedStringValue   map[string]string         `protobuf:"bytes,23,rep,name=mapped_string_value,json=mappedStringValue,proto3" json:"mapped_string_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MappedEnumValue     map[string]NumericEnum    `protobuf:"bytes,24,rep,name=mapped_enum_value,json=mappedEnumValue,proto3" json:"mapped_enum_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=trpc.examples.restful.helloworld.NumericEnum"`
	MappedNestedValue   map[string]*NestedOuter   `protobuf:"bytes,25,rep,name=mapped_nested_value,json=mappedNestedValue,proto3" json:"mapped_nested_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Time                *timestamppb.Timestamp    `protobuf:"bytes,26,opt,name=time,proto3" json:"time,omitempty"`
	Duration            *durationpb.Duration      `protobuf:"bytes,27,opt,name=duration,proto3" json:"duration,omitempty"`
	WrappedStrValue     *wrapperspb.StringValue   `protobuf:"bytes,28,opt,name=wrapped_str_value,json=wrappedStrValue,proto3" json:"wrapped_str_value,omitempty"`
	WrappedFloatValue   *wrapperspb.FloatValue    `protobuf:"bytes,29,opt,name=wrapped_float_value,json=wrappedFloatValue,proto3" json:"wrapped_float_value,omitempty"`
	WrappedDoubleValue  *wrapperspb.DoubleValue   `protobuf:"bytes,30,opt,name=wrapped_double_value,json=wrappedDoubleValue,proto3" json:"wrapped_double_value,omitempty"`
	WrappedBoolValue    *wrapperspb.BoolValue     `protobuf:"bytes,31,opt,name=wrapped_bool_value,json=wrappedBoolValue,proto3" json:"wrapped_bool_value,omitempty"`
	WrappedBytesValue   *wrapperspb.BytesValue    `protobuf:"bytes,32,opt,name=wrapped_bytes_value,json=wrappedBytesValue,proto3" json:"wrapped_bytes_value,omitempty"`
	WrappedInt32Value   *wrapperspb.Int32Value    `protobuf:"bytes,33,opt,name=wrapped_int32_value,json=wrappedInt32Value,proto3" json:"wrapped_int32_value,omitempty"`
	WrappedUint32Value  *wrapperspb.UInt32Value   `protobuf:"bytes,34,opt,name=wrapped_uint32_value,json=wrappedUint32Value,proto3" json:"wrapped_uint32_value,omitempty"`
	WrappedInt64Value   *wrapperspb.Int64Value    `protobuf:"bytes,35,opt,name=wrapped_int64_value,json=wrappedInt64Value,proto3" json:"wrapped_int64_value,omitempty"`
	WrappedUint64Value  *wrapperspb.UInt64Value   `protobuf:"bytes,36,opt,name=wrapped_uint64_value,json=wrappedUint64Value,proto3" json:"wrapped_uint64_value,omitempty"`
	MaskValue           *fieldmaskpb.FieldMask    `protobuf:"bytes,37,opt,name=mask_value,json=maskValue,proto3" json:"mask_value,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelloRequest) GetSingleNested() *NestedOuter {
	if x != nil {
		return x.SingleNested
	}
	return nil
}

func (x *HelloRequest) GetPrimitiveBytesValue() []byte {
	if x != nil {
		return x.PrimitiveBytesValue
	}
	return nil
}

func (x *HelloRequest) GetPrimitiveBoolValue() bool {
	if x != nil {
		return x.PrimitiveBoolValue
	}
	return false
}

func (x *HelloRequest) GetPrimitiveFloatValue() float32 {
	if x != nil {
		return x.PrimitiveFloatValue
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveDoubleValue() float64 {
	if x != nil {
		return x.PrimitiveDoubleValue
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveInt32Value() int32 {
	if x != nil {
		return x.PrimitiveInt32Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveUint32Value() uint32 {
	if x != nil {
		return x.PrimitiveUint32Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveInt64Value() int64 {
	if x != nil {
		return x.PrimitiveInt64Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveUint64Value() uint64 {
	if x != nil {
		return x.PrimitiveUint64Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveFixed32Value() uint32 {
	if x != nil {
		return x.PrimitiveFixed32Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveFixed64Value() uint64 {
	if x != nil {
		return x.PrimitiveFixed64Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveSint32Value() int32 {
	if x != nil {
		return x.PrimitiveSint32Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveSint64Value() int64 {
	if x != nil {
		return x.PrimitiveSint64Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveSfixed32Value() int32 {
	if x != nil {
		return x.PrimitiveSfixed32Value
	}
	return 0
}

func (x *HelloRequest) GetPrimitiveSfixed64Value() int64 {
	if x != nil {
		return x.PrimitiveSfixed64Value
	}
	return 0
}

func (x *HelloRequest) GetEnumValue() NumericEnum {
	if x != nil {
		return x.EnumValue
	}
	return NumericEnum_ZERO
}

func (m *HelloRequest) GetOneofValue() isHelloRequest_OneofValue {
	if m != nil {
		return m.OneofValue
	}
	return nil
}

func (x *HelloRequest) GetOneofEmpty() *emptypb.Empty {
	if x, ok := x.GetOneofValue().(*HelloRequest_OneofEmpty); ok {
		return x.OneofEmpty
	}
	return nil
}

func (x *HelloRequest) GetOneofString() string {
	if x, ok := x.GetOneofValue().(*HelloRequest_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (x *HelloRequest) GetRepeatedStringValue() []string {
	if x != nil {
		return x.RepeatedStringValue
	}
	return nil
}

func (x *HelloRequest) GetRepeatedEnumValue() []NumericEnum {
	if x != nil {
		return x.RepeatedEnumValue
	}
	return nil
}

func (x *HelloRequest) GetRepeatedNestedValue() []*NestedOuter {
	if x != nil {
		return x.RepeatedNestedValue
	}
	return nil
}

func (x *HelloRequest) GetMappedStringValue() map[string]string {
	if x != nil {
		return x.MappedStringValue
	}
	return nil
}

func (x *HelloRequest) GetMappedEnumValue() map[string]NumericEnum {
	if x != nil {
		return x.MappedEnumValue
	}
	return nil
}

func (x *HelloRequest) GetMappedNestedValue() map[string]*NestedOuter {
	if x != nil {
		return x.MappedNestedValue
	}
	return nil
}

func (x *HelloRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HelloRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *HelloRequest) GetWrappedStrValue() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedStrValue
	}
	return nil
}

func (x *HelloRequest) GetWrappedFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrappedFloatValue
	}
	return nil
}

func (x *HelloRequest) GetWrappedDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrappedDoubleValue
	}
	return nil
}

func (x *HelloRequest) GetWrappedBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrappedBoolValue
	}
	return nil
}

func (x *HelloRequest) GetWrappedBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.WrappedBytesValue
	}
	return nil
}

func (x *HelloRequest) GetWrappedInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrappedInt32Value
	}
	return nil
}

func (x *HelloRequest) GetWrappedUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrappedUint32Value
	}
	return nil
}

func (x *HelloRequest) GetWrappedInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrappedInt64Value
	}
	return nil
}

func (x *HelloRequest) GetWrappedUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrappedUint64Value
	}
	return nil
}

func (x *HelloRequest) GetMaskValue() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.MaskValue
	}
	return nil
}

type isHelloRequest_OneofValue interface {
	isHelloRequest_OneofValue()
}

type HelloRequest_OneofEmpty struct {
	OneofEmpty *emptypb.Empty `protobuf:"bytes,18,opt,name=oneof_empty,json=oneofEmpty,proto3,oneof"`
}

type HelloRequest_OneofString struct {
	OneofString string `protobuf:"bytes,19,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

func (*HelloRequest_OneofEmpty) isHelloRequest_OneofValue() {}

func (*HelloRequest_OneofString) isHelloRequest_OneofValue() {}

// Hello 响应
type HelloReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 嵌套外层
type NestedOuter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amount uint32               `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Ok     NestedOuter_DeepEnum `protobuf:"varint,3,opt,name=ok,proto3,enum=trpc.examples.restful.helloworld.NestedOuter_DeepEnum" json:"ok,omitempty"`
	Inner  *NestedInner         `protobuf:"bytes,4,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *NestedOuter) Reset() {
	*x = NestedOuter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedOuter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedOuter) ProtoMessage() {}

func (x *NestedOuter) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedOuter.ProtoReflect.Descriptor instead.
func (*NestedOuter) Descriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{2}
}

func (x *NestedOuter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NestedOuter) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NestedOuter) GetOk() NestedOuter_DeepEnum {
	if x != nil {
		return x.Ok
	}
	return NestedOuter_FALSE
}

func (x *NestedOuter) GetInner() *NestedInner {
	if x != nil {
		return x.Inner
	}
	return nil
}

// 嵌套内层
type NestedInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A bool `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B bool `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *NestedInner) Reset() {
	*x = NestedInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedInner) ProtoMessage() {}

func (x *NestedInner) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedInner.ProtoReflect.Descriptor instead.
func (*NestedInner) Descriptor() ([]byte, []int) {
	return file_helloworld_proto_rawDescGZIP(), []int{3}
}

func (x *NestedInner) GetA() bool {
	if x != nil {
		return x.A
	}
	return false
}

func (x *NestedInner) GetB() bool {
	if x != nil {
		return x.B
	}
	return false
}

var File_helloworld_proto protoreflect.FileDescriptor

var file_helloworld_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x20, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x1a, 0x1a, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x84, 0x16, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x70,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x16, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x10, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a,
	0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65,
	0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x75, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4b, 0x0a, 0x13, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e,
	0x0a, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4e, 0x0a, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x71, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75,
	0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xe7, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x1f, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x70,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x0b, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x01, 0x62, 0x2a, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x32, 0xa6, 0x01, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0xca,
	0xc1, 0x18, 0x2c, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x3a,
	0x01, 0x2a, 0x5a, 0x10, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x6f, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x5a, 0x09, 0x12, 0x07, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x61, 0x72, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x66, 0x75, 0x6c, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helloworld_proto_rawDescOnce sync.Once
	file_helloworld_proto_rawDescData = file_helloworld_proto_rawDesc
)

func file_helloworld_proto_rawDescGZIP() []byte {
	file_helloworld_proto_rawDescOnce.Do(func() {
		file_helloworld_proto_rawDescData = protoimpl.X.CompressGZIP(file_helloworld_proto_rawDescData)
	})
	return file_helloworld_proto_rawDescData
}

var file_helloworld_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_helloworld_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_helloworld_proto_goTypes = []interface{}{
	(NumericEnum)(0),               // 0: trpc.examples.restful.helloworld.NumericEnum
	(NestedOuter_DeepEnum)(0),      // 1: trpc.examples.restful.helloworld.NestedOuter.DeepEnum
	(*HelloRequest)(nil),           // 2: trpc.examples.restful.helloworld.HelloRequest
	(*HelloReply)(nil),             // 3: trpc.examples.restful.helloworld.HelloReply
	(*NestedOuter)(nil),            // 4: trpc.examples.restful.helloworld.NestedOuter
	(*NestedInner)(nil),            // 5: trpc.examples.restful.helloworld.NestedInner
	nil,                            // 6: trpc.examples.restful.helloworld.HelloRequest.MappedStringValueEntry
	nil,                            // 7: trpc.examples.restful.helloworld.HelloRequest.MappedEnumValueEntry
	nil,                            // 8: trpc.examples.restful.helloworld.HelloRequest.MappedNestedValueEntry
	(*emptypb.Empty)(nil),          // 9: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 11: google.protobuf.Duration
	(*wrapperspb.StringValue)(nil), // 12: google.protobuf.StringValue
	(*wrapperspb.FloatValue)(nil),  // 13: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil), // 14: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),   // 15: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),  // 16: google.protobuf.BytesValue
	(*wrapperspb.Int32Value)(nil),  // 17: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil), // 18: google.protobuf.UInt32Value
	(*wrapperspb.Int64Value)(nil),  // 19: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil), // 20: google.protobuf.UInt64Value
	(*fieldmaskpb.FieldMask)(nil),  // 21: google.protobuf.FieldMask
}
var file_helloworld_proto_depIdxs = []int32{
	4,  // 0: trpc.examples.restful.helloworld.HelloRequest.single_nested:type_name -> trpc.examples.restful.helloworld.NestedOuter
	0,  // 1: trpc.examples.restful.helloworld.HelloRequest.enum_value:type_name -> trpc.examples.restful.helloworld.NumericEnum
	9,  // 2: trpc.examples.restful.helloworld.HelloRequest.oneof_empty:type_name -> google.protobuf.Empty
	0,  // 3: trpc.examples.restful.helloworld.HelloRequest.repeated_enum_value:type_name -> trpc.examples.restful.helloworld.NumericEnum
	4,  // 4: trpc.examples.restful.helloworld.HelloRequest.repeated_nested_value:type_name -> trpc.examples.restful.helloworld.NestedOuter
	6,  // 5: trpc.examples.restful.helloworld.HelloRequest.mapped_string_value:type_name -> trpc.examples.restful.helloworld.HelloRequest.MappedStringValueEntry
	7,  // 6: trpc.examples.restful.helloworld.HelloRequest.mapped_enum_value:type_name -> trpc.examples.restful.helloworld.HelloRequest.MappedEnumValueEntry
	8,  // 7: trpc.examples.restful.helloworld.HelloRequest.mapped_nested_value:type_name -> trpc.examples.restful.helloworld.HelloRequest.MappedNestedValueEntry
	10, // 8: trpc.examples.restful.helloworld.HelloRequest.time:type_name -> google.protobuf.Timestamp
	11, // 9: trpc.examples.restful.helloworld.HelloRequest.duration:type_name -> google.protobuf.Duration
	12, // 10: trpc.examples.restful.helloworld.HelloRequest.wrapped_str_value:type_name -> google.protobuf.StringValue
	13, // 11: trpc.examples.restful.helloworld.HelloRequest.wrapped_float_value:type_name -> google.protobuf.FloatValue
	14, // 12: trpc.examples.restful.helloworld.HelloRequest.wrapped_double_value:type_name -> google.protobuf.DoubleValue
	15, // 13: trpc.examples.restful.helloworld.HelloRequest.wrapped_bool_value:type_name -> google.protobuf.BoolValue
	16, // 14: trpc.examples.restful.helloworld.HelloRequest.wrapped_bytes_value:type_name -> google.protobuf.BytesValue
	17, // 15: trpc.examples.restful.helloworld.HelloRequest.wrapped_int32_value:type_name -> google.protobuf.Int32Value
	18, // 16: trpc.examples.restful.helloworld.HelloRequest.wrapped_uint32_value:type_name -> google.protobuf.UInt32Value
	19, // 17: trpc.examples.restful.helloworld.HelloRequest.wrapped_int64_value:type_name -> google.protobuf.Int64Value
	20, // 18: trpc.examples.restful.helloworld.HelloRequest.wrapped_uint64_value:type_name -> google.protobuf.UInt64Value
	21, // 19: trpc.examples.restful.helloworld.HelloRequest.mask_value:type_name -> google.protobuf.FieldMask
	1,  // 20: trpc.examples.restful.helloworld.NestedOuter.ok:type_name -> trpc.examples.restful.helloworld.NestedOuter.DeepEnum
	5,  // 21: trpc.examples.restful.helloworld.NestedOuter.inner:type_name -> trpc.examples.restful.helloworld.NestedInner
	0,  // 22: trpc.examples.restful.helloworld.HelloRequest.MappedEnumValueEntry.value:type_name -> trpc.examples.restful.helloworld.NumericEnum
	4,  // 23: trpc.examples.restful.helloworld.HelloRequest.MappedNestedValueEntry.value:type_name -> trpc.examples.restful.helloworld.NestedOuter
	2,  // 24: trpc.examples.restful.helloworld.Greeter.SayHello:input_type -> trpc.examples.restful.helloworld.HelloRequest
	3,  // 25: trpc.examples.restful.helloworld.Greeter.SayHello:output_type -> trpc.examples.restful.helloworld.HelloReply
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_helloworld_proto_init() }
func file_helloworld_proto_init() {
	if File_helloworld_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helloworld_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helloworld_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helloworld_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedOuter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helloworld_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_helloworld_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*HelloRequest_OneofEmpty)(nil),
		(*HelloRequest_OneofString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helloworld_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helloworld_proto_goTypes,
		DependencyIndexes: file_helloworld_proto_depIdxs,
		EnumInfos:         file_helloworld_proto_enumTypes,
		MessageInfos:      file_helloworld_proto_msgTypes,
	}.Build()
	File_helloworld_proto = out.File
	file_helloworld_proto_rawDesc = nil
	file_helloworld_proto_goTypes = nil
	file_helloworld_proto_depIdxs = nil
}
