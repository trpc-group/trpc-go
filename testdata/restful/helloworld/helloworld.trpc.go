// Tencent is pleased to support the open source community by making tRPC available.
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License that can be found in the LICENSE file.

// Code generated by trpc-go/trpc-cmdline v2.0.13. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import (
	"context"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/restful"
	"trpc.group/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// GreeterService defines service
type GreeterService interface {
	SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error)
}

func GreeterService_SayHello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &HelloRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqBody interface{}) (interface{}, error) {
		return svr.(GreeterService).SayHello(ctx, reqBody.(*HelloRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// requestBodyGreeterServiceSayHelloRESTfulPath0 POST: /v1/foobar
type requestBodyGreeterServiceSayHelloRESTfulPath0 struct{}

func (requestBodyGreeterServiceSayHelloRESTfulPath0) Locate(message restful.ProtoMessage) interface{} {
	x := message.(*HelloRequest)
	return x
}

func (requestBodyGreeterServiceSayHelloRESTfulPath0) Body() string {
	return "*"
}

// GreeterServer_ServiceDesc descriptor for server.RegisterService
var GreeterServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.examples.restful.helloworld.Greeter",
	HandlerType: ((*GreeterService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.examples.restful.helloworld.Greeter/SayHello",
			Func: GreeterService_SayHello_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/trpc.examples.restful.helloworld.Greeter/SayHello",
				Input: func() restful.ProtoMessage { return new(HelloRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqBody interface{}) (interface{}, error) {
					return svc.(GreeterService).SayHello(ctx, reqBody.(*HelloRequest))
				},
				HTTPMethod:   "POST",
				Pattern:      restful.Enforce("/v1/foobar"),
				Body:         requestBodyGreeterServiceSayHelloRESTfulPath0{},
				ResponseBody: nil,
			}, {
				Name:  "/trpc.examples.restful.helloworld.Greeter/SayHello",
				Input: func() restful.ProtoMessage { return new(HelloRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqBody interface{}) (interface{}, error) {
					return svc.(GreeterService).SayHello(ctx, reqBody.(*HelloRequest))
				},
				HTTPMethod:   "POST",
				Pattern:      restful.Enforce("/v1/foo/{name}"),
				Body:         nil,
				ResponseBody: nil,
			}, {
				Name:  "/trpc.examples.restful.helloworld.Greeter/SayHello",
				Input: func() restful.ProtoMessage { return new(HelloRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqBody interface{}) (interface{}, error) {
					return svc.(GreeterService).SayHello(ctx, reqBody.(*HelloRequest))
				},
				HTTPMethod:   "GET",
				Pattern:      restful.Enforce("/v2/bar"),
				Body:         nil,
				ResponseBody: nil,
			}},
		},
	},
}

// RegisterGreeterService register service
func RegisterGreeterService(s server.Service, svr GreeterService) {
	if err := s.Register(&GreeterServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Greeter register error:%v", err))
	}
}

/* ************************************ Client Definition ************************************ */

// GreeterClientProxy defines service client proxy
type GreeterClientProxy interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (rsp *HelloReply, err error)
}

type GreeterClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGreeterClientProxy = func(opts ...client.Option) GreeterClientProxy {
	return &GreeterClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GreeterClientProxyImpl) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloReply, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.examples.restful.helloworld.Greeter/SayHello")
	msg.WithCalleeServiceName(GreeterServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Greeter")
	msg.WithCalleeMethod("SayHello")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HelloReply{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}
